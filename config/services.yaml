# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    twilio_number: '%env(TWILIO_PHONE_NUMBER)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.monolog.processor.web:
        class: App\Application\Service\Log\Web
        arguments: ["@request_stack"]
        tags:
            - { name: monolog.processor, method: processRecord }

    App\Application\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    acme_api.event.authentication_failure_listener:
        class: App\Application\EventListener\Auth\AuthenticationFailureListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }

    acme_api.event.authentication_success_listener:
        class: App\Application\EventListener\Auth\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    twilio.client:
        class: Twilio\Rest\Client
        arguments: ['%env(TWILIO_SID)%', '%env(TWILIO_AUTH_TOKEN)%']

    Twilio\Rest\Client: '@twilio.client'

    twilio.request_validator:
        class: Twilio\Security\RequestValidator
        arguments: [ '%env(TWILIO_AUTH_TOKEN)%' ]

    Twilio\Security\RequestValidator: '@twilio.request_validator'

    App\Application\Service\Phone\SmsProvider:
        arguments:
            $messagingServiceSid: '%env(TWILIO_MESSSAGE_SERVICE)%'

    acme_api.event.jwt_notfound_listener:
        class: App\Application\EventListener\Auth\JWTNotFoundListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound }

    App\Application\Service\Tokens\TokenService:
        arguments:
            - "@lexik_jwt_authentication.jwt_manager"
            - "@gesdinet.jwtrefreshtoken.refresh_token_manager"
            - "@validator"
            - "%gesdinet_jwt_refresh_token.user_identity_field%"
            - "%gesdinet_jwt_refresh_token.ttl%"

    acme_api.event.jwt_created_listener:
        class: App\Application\EventListener\Auth\JWTCreatedListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    acme_api.event.jwt_expired_listener:
        class: App\Application\EventListener\Auth\JWTExpiredListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_expired, method: onJWTExpired }

    acme_api.event.jwt_invalid_listener:
        class: App\Application\EventListener\Auth\JWTInvalidListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_invalid, method: onJWTInvalid }

    gesdinet.jwtrefreshtoken.user_provider:
        class: Gesdinet\JWTRefreshTokenBundle\Security\Provider\RefreshTokenProvider
        arguments: [ "@gesdinet.jwtrefreshtoken.refresh_token_manager" ]

    gesdinet.jwtrefreshtoken.send_token:
        class: App\Application\EventListener\Auth\AttachRefreshTokenOnSuccessListener
        arguments: [ "@gesdinet.jwtrefreshtoken.refresh_token_manager", "%gesdinet_jwt_refresh_token.ttl%", "@validator", "@request_stack", "%gesdinet_jwt_refresh_token.user_identity_field%", "%gesdinet_jwt_refresh_token.token_parameter_name%", "%gesdinet_jwt_refresh_token.single_use%" ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: attachRefreshToken }

#    Finesse\SwiftMailerDefaultsPlugin\SwiftMailerDefaultsPlugin:
#        arguments:
#            $defaults:
#                from:
#                    '%env(MAILER_FROM_EMAIL)%': '%env(MAILER_FROM_NAME)%'
#        tags:
#            - { name: swiftmailer.default.plugin }